ALTER SESSION SET CONTAINER=XEPDB1;

    --Table Person
    CREATE TABLE APPUSER.PERSON (
      PERSON NUMBER,
      Username VARCHAR2(100) UNIQUE NOT NULL,
      EMAIL VARCHAR2(100) UNIQUE NOT NULL,
      PASSWORD VARCHAR2(100) NOT NULL,
      ADD_DATE DATE DEFAULT SYSDATE,
      PRIMARY KEY(PERSON)
    );

    --Person sequence
    CREATE SEQUENCE APPUSER.SQ_PERSON NOCACHE;

    --Person for test
    INSERT INTO APPUSER.PERSON (PERSON, USERNAME, EMAIL, PASSWORD)
    VALUES(APPUSER.SQ_PERSON.NEXTVAL, 'test', 'test@test.com', 'test123');

    -- Category table and sequence
    CREATE TABLE APPUSER.CATEGORY (
      CATEGORY NUMBER,
      NAME VARCHAR2(100) UNIQUE NOT NULL,
      DESCRIPTION VARCHAR2(200) NOT NULL,
      PERSON NUMBER,
      ADD_DATE DATE DEFAULT SYSDATE,
      PRIMARY KEY (CATEGORY)
    );

    CREATE SEQUENCE APPUSER.SQ_CATEGORY NOCACHE;

    -- Insert Default Categories
    INSERT INTO APPUSER.CATEGORY (CATEGORY, NAME, DESCRIPTION)
    VALUES (APPUSER.SQ_CATEGORY.NEXTVAL, 'Video games', 'Purchase of video games');

    INSERT INTO APPUSER.CATEGORY (CATEGORY, NAME, DESCRIPTION)
    VALUES (APPUSER.SQ_CATEGORY.NEXTVAL, 'Pantry', 'Pantry purchase');

    INSERT INTO APPUSER.CATEGORY (CATEGORY, NAME, DESCRIPTION)
    VALUES (APPUSER.SQ_CATEGORY.NEXTVAL, 'Spotify', 'Spotify membership payment');

    INSERT INTO APPUSER.CATEGORY (CATEGORY, NAME, DESCRIPTION)
    VALUES (APPUSER.SQ_CATEGORY.NEXTVAL, 'Transfer', 'Send or Deposit money');

    INSERT INTO APPUSER.CATEGORY (CATEGORY, NAME, DESCRIPTION)
    VALUES (APPUSER.SQ_CATEGORY.NEXTVAL, 'Salary Payment', 'Salary payment from my job');

    -- Currencies table, sequence and default currencies
    CREATE TABLE APPUSER.CURRENCY (
      CURRENCY NUMBER,
      SYMBOL VARCHAR2(5) UNIQUE NOT NULL,
      NAME VARCHAR2(20) UNIQUE NOT NULL,
      ACRONYM VARCHAR2(3) UNIQUE NOT NULL,
        BASE NUMBER NOT NULL,
      PRIMARY KEY (CURRENCY)
    );

    CREATE SEQUENCE APPUSER.SQ_CURRENCY NOCACHE;

    -- Insert of available currencies

    INSERT INTO APPUSER.CURRENCY (CURRENCY, SYMBOL, NAME, ACRONYM, BASE)
    VALUES(APPUSER.SQ_CURRENCY.NEXTVAL, 'Q', 'Queetzal', 'GTQ', 1);

    INSERT INTO APPUSER.CURRENCY (CURRENCY, SYMBOL, NAME, ACRONYM, BASE)
    VALUES(APPUSER.SQ_CURRENCY.NEXTVAL, '$', 'Dollar', 'USD', 0.1283);

    INSERT INTO APPUSER.CURRENCY (CURRENCY, SYMBOL, NAME, ACRONYM, BASE)
    VALUES(APPUSER.SQ_CURRENCY.NEXTVAL, 'â‚¬', 'Euro', 'EUR', 0.13);

    INSERT INTO APPUSER.CURRENCY (CURRENCY, SYMBOL, NAME, ACRONYM, BASE)
    VALUES(APPUSER.SQ_CURRENCY.NEXTVAL, 'L', 'Lempira', 'HNL', 3.125);

    -- Bankaccount table and sequence
    CREATE TABLE APPUSER.BANKACCOUNT (
      BANKACCOUNT NUMBER,
      ACCOUNT_NUMBER VARCHAR2(100) UNIQUE NOT NULL,
      BALANCE NUMBER DEFAULT 0,
      PERSON NUMBER NOT NULL,
      CURRENCY NUMBER NOT NULL,
      ADD_DATE DATE DEFAULT SYSDATE,
      PRIMARY KEY (BANKACCOUNT),
      FOREIGN KEY (PERSON) REFERENCES APPUSER.PERSON(PERSON),
      FOREIGN KEY (CURRENCY) REFERENCES APPUSER.CURRENCY(CURRENCY)
    );

    CREATE SEQUENCE APPUSER.SQ_BANKACCOUNT NOCACHE;

    --Create a bankaccount for test user
    INSERT INTO APPUSER.BANKACCOUNT (BANKACCOUNT, ACCOUNT_NUMBER, BALANCE, PERSON, CURRENCY)
    VALUES(APPUSER.SQ_BANKACCOUNT.NEXTVAL, '123456789', 5000, 1, 2);


    -- Transaction Types table, sequence and default values
    CREATE TABLE APPUSER.TRTYPE (
      TRTYPE NUMBER,
      NAME VARCHAR2(25) UNIQUE NOT NULL,
      DESCRIPTION VARCHAR2(100) NOT NULL,
      PRIMARY KEY (TRTYPE)
    );

    CREATE SEQUENCE APPUSER.SQ_TRTYPE NOCACHE;

    -- Insert of available Transaction Types
    INSERT INTO APPUSER.TRTYPE (TRTYPE, NAME, DESCRIPTION)
    VALUES (APPUSER.SQ_TRTYPE.NEXTVAL, 'Income', 'Deposit of money to the account');

    INSERT INTO APPUSER.TRTYPE (TRTYPE, NAME, DESCRIPTION)
    VALUES (APPUSER.SQ_TRTYPE.NEXTVAL, 'Expense', 'Outflow of money from the account');

    -- Transaction table and sequence
    CREATE TABLE APPUSER.TRANSAC (
      TRANSAC NUMBER,
      AMOUNT NUMBER NOT NULL,
      DESCRIPTION VARCHAR2(100),
      BANKACCOUNT NUMBER NOT NULL,
      CATEGORY NUMBER NOT NULL,
      CURRENCY NUMBER NOT NULL,
      TRTYPE NUMBER NOT NULL,
      ADD_DATE DATE DEFAULT SYSDATE,
      PRIMARY KEY (TRANSAC),
      FOREIGN KEY (BANKACCOUNT) REFERENCES APPUSER.BANKACCOUNT(BANKACCOUNT),
      FOREIGN KEY (CATEGORY) REFERENCES APPUSER.CATEGORY(CATEGORY),
      FOREIGN KEY (CURRENCY) REFERENCES APPUSER.CURRENCY(CURRENCY),
      FOREIGN KEY (TRTYPE) REFERENCES APPUSER.TRTYPE(TRTYPE)
    );

    CREATE SEQUENCE APPUSER.SQ_TRANSAC NOCACHE;

	--Default Income transactions for test account
	INSERT INTO APPUSER.TRANSAC (TRANSAC, AMOUNT, DESCRIPTION, BANKACCOUNT, CATEGORY, CURRENCY, TRTYPE, ADD_DATE)
	VALUES (APPUSER.SQ_TRANSAC.NEXTVAL, 1000, '', 1, 5, 2, 1, TIMESTAMP '2022-05-03 10:08:46.000');
	INSERT INTO APPUSER.TRANSAC (TRANSAC, AMOUNT, DESCRIPTION, BANKACCOUNT, CATEGORY, CURRENCY, TRTYPE, ADD_DATE)
	VALUES (APPUSER.SQ_TRANSAC.NEXTVAL, 2000, '', 1, 5, 2, 1, TIMESTAMP '2022-06-03 10:08:46.000');
	INSERT INTO APPUSER.TRANSAC (TRANSAC, AMOUNT, DESCRIPTION, BANKACCOUNT, CATEGORY, CURRENCY, TRTYPE, ADD_DATE)
	VALUES (APPUSER.SQ_TRANSAC.NEXTVAL, 3000, '', 1, 5, 2, 1, TIMESTAMP '2022-09-10 10:08:46.000');
	
	--UPDATE THE ACCOUNT
	UPDATE APPUSER.BANKACCOUNT SET BALANCE = (BALANCE + 1000)
	WHERE BANKACCOUNT  = 1
	AND PERSON = 1;

	UPDATE APPUSER.BANKACCOUNT SET BALANCE = (BALANCE + 2000)
	WHERE BANKACCOUNT  = 1
	AND PERSON = 1;

	UPDATE APPUSER.BANKACCOUNT SET BALANCE = (BALANCE + 3000)
	WHERE BANKACCOUNT  = 1
	AND PERSON = 1;

	--Default Expense transactions for test account
	INSERT INTO APPUSER.TRANSAC (TRANSAC, AMOUNT, DESCRIPTION, BANKACCOUNT, CATEGORY, CURRENCY, TRTYPE, ADD_DATE)
	VALUES (APPUSER.SQ_TRANSAC.NEXTVAL, 1000, '', 1, 5, 2, 2, TIMESTAMP '2022-09-15 10:08:46.000');
	INSERT INTO APPUSER.TRANSAC (TRANSAC, AMOUNT, DESCRIPTION, BANKACCOUNT, CATEGORY, CURRENCY, TRTYPE, ADD_DATE)
	VALUES (APPUSER.SQ_TRANSAC.NEXTVAL, 2000, '', 1, 5, 2, 2, TIMESTAMP '2022-10-02 10:08:46.000');
	INSERT INTO APPUSER.TRANSAC (TRANSAC, AMOUNT, DESCRIPTION, BANKACCOUNT, CATEGORY, CURRENCY, TRTYPE, ADD_DATE)
	VALUES (APPUSER.SQ_TRANSAC.NEXTVAL, 3000, '', 1, 5, 2, 2, TIMESTAMP '2022-10-05 10:08:46.000');

	UPDATE APPUSER.BANKACCOUNT SET BALANCE = (BALANCE - 1000)
	WHERE BANKACCOUNT  = 1
	AND PERSON = 1;

	UPDATE APPUSER.BANKACCOUNT SET BALANCE = (BALANCE - 2000)
	WHERE BANKACCOUNT  = 1
	AND PERSON = 1;

	UPDATE APPUSER.BANKACCOUNT SET BALANCE = (BALANCE - 3000)
	WHERE BANKACCOUNT  = 1
	AND PERSON = 1;

    -- Transfer table and sequence
    CREATE TABLE APPUSER.TRANSFER (
      TRANSFER NUMBER,
      AMOUNT NUMBER NOT NULL,
      DESCRIPTION VARCHAR2(100),
      ORIG_ACCOUNT VARCHAR2(100) NOT NULL,
      DEST_ACCOUNT VARCHAR2(100) NOT NULL,
      ORIG_CURRENCY NUMBER NOT NULL,
      DEST_CURRENCY NUMBER NOT NULL,
      ADD_DATE DATE DEFAULT SYSDATE,
      PRIMARY KEY (TRANSFER)
    );

    CREATE SEQUENCE APPUSER.SQ_TRANSFER NOCACHE;

    -- Transction - Transfer Table
    CREATE TABLE APPUSER.TRANSAC_TRANSFER (
      TRANSAC NUMBER NOT NULL,
      TRANSFER NUMBER NOT NULL
    );

    -- PROCEDURE TO MANAGE TRANSFERS
    CREATE OR REPLACE PROCEDURE  APPUSER.EXECUTE_TRANSFERS (
      v_person_id IN APPUSER.PERSON.PERSON%TYPE,
      v_transfer_id  IN APPUSER.TRANSFER.TRANSFER%TYPE,
      v_amount IN APPUSER.TRANSFER.AMOUNT%TYPE,
      v_description IN APPUSER.TRANSFER.DESCRIPTION%TYPE,
      v_orig_account IN APPUSER.TRANSFER.ORIG_ACCOUNT%TYPE,
      v_dest_account IN APPUSER.TRANSFER.DEST_ACCOUNT%TYPE	
    )
    IS
      v_idbankaccount_origin APPUSER.BANKACCOUNT.BANKACCOUNT%TYPE;
      v_idbankaccount_DESTINATION APPUSER.BANKACCOUNT.BANKACCOUNT%TYPE;
      v_orig_currency APPUSER.BANKACCOUNT.CURRENCY%TYPE;
      v_dest_currency APPUSER.BANKACCOUNT.CURRENCY%TYPE;
      v_dest_amount APPUSER.TRANSFER.AMOUNT%TYPE;
      v_orig_base APPUSER.CURRENCY.BASE%TYPE;
      v_dest_base APPUSER.CURRENCY.BASE%TYPE;
    BEGIN
      -- ======== GET THE CURRENCY FROM ORIGIN AND DESTINATION ACCOUNTS ========
      SELECT b.CURRENCY INTO v_orig_currency
      FROM APPUSER.BANKACCOUNT b, APPUSER.PERSON p
      WHERE b.ACCOUNT_NUMBER = v_orig_account
      AND p.PERSON = v_person_id;

      SELECT b.CURRENCY INTO v_dest_currency
      FROM APPUSER.BANKACCOUNT b, APPUSER.PERSON p
      WHERE b.ACCOUNT_NUMBER = v_dest_account
      AND p.PERSON = v_person_id;
      -- ====================== END OF BLOCK ======================

      -- ======== SET DESTINATION AMOUNT ========
      -- GET THE BASE FROM THE ORIGIN AND DESTINATION CURRENCY FOR AMOUNT
      SELECT c.BASE INTO v_orig_base
      FROM APPUSER.CURRENCY c, APPUSER.BANKACCOUNT b
      WHERE b.ACCOUNT_NUMBER = v_orig_account
      AND b.CURRENCY = c.CURRENCY;

      SELECT c.BASE INTO v_dest_base
      FROM APPUSER.CURRENCY c, APPUSER.BANKACCOUNT b 
      WHERE b.ACCOUNT_NUMBER = v_dest_account
      AND b.CURRENCY = c.CURRENCY;
      
      -- MATH OPERATION FOR CURRENCY CONVERSION
      v_dest_amount := (v_amount / v_orig_base) * v_dest_base;
      -- ====================== END OF BLOCK ======================

      -- ======== INSERT TRANSFER INTO TRANSFER TABLE ========
      INSERT INTO APPUSER.TRANSFER (TRANSFER, AMOUNT,	DESCRIPTION, ORIG_ACCOUNT, DEST_ACCOUNT, ORIG_CURRENCY, DEST_CURRENCY)
      VALUES (v_transfer_id, v_amount, v_description, v_orig_account, v_dest_account, v_orig_currency, v_dest_currency);
      -- ====================== END OF BLOCK ======================

      -- ======== UPDATE THE BALANCE FROM THE ACCOUNTS ========
      UPDATE APPUSER.BANKACCOUNT SET BALANCE = (BALANCE - v_amount)
        WHERE ACCOUNT_NUMBER = v_orig_account;
      
      UPDATE APPUSER.BANKACCOUNT SET BALANCE = (BALANCE + v_dest_amount)
        WHERE ACCOUNT_NUMBER = v_dest_account;
      -- ====================== END OF BLOCK ======================
      
      -- ======== INSERT INTO TABLE TRANSC AND TRANSAC_TRANSFER ========
      -- GET THE BANKACCOUNT ID FROM ORIGIN AND DESTINATION ACCOUNT
      SELECT BANKACCOUNT INTO v_idbankaccount_origin 
      FROM APPUSER.BANKACCOUNT 
      WHERE ACCOUNT_NUMBER = v_orig_account;

      SELECT BANKACCOUNT INTO v_idbankaccount_DESTINATION
      FROM APPUSER.BANKACCOUNT
      WHERE ACCOUNT_NUMBER = v_dest_account;

      -- INSERT ORIG ACCOUNT INTO TRANSAC
      INSERT INTO APPUSER.TRANSAC (TRANSAC, AMOUNT, DESCRIPTION, BANKACCOUNT, CATEGORY, CURRENCY, TRTYPE)
      VALUES (APPUSER.SQ_TRANSAC.NEXTVAL, v_amount, v_description, v_idbankaccount_origin, 4, v_orig_currency, 2);
      
      -- INSERT THE ORIGIN TRANSAC ID AND TRANSFER ID INTO TRANSAC_TRANSFER
      INSERT INTO APPUSER.TRANSAC_TRANSFER (TRANSAC, TRANSFER)
      VALUES (APPUSER.SQ_TRANSAC.CURRVAL, APPUSER.SQ_TRANSFER.CURRVAL);
      
      -- INSERT DESTINATION ACCOUNT INTO TRANSAC
      INSERT INTO APPUSER.TRANSAC (TRANSAC, AMOUNT, DESCRIPTION, BANKACCOUNT, CATEGORY, CURRENCY, TRTYPE)
      VALUES (APPUSER.SQ_TRANSAC.NEXTVAL, v_dest_amount, v_description, v_idbankaccount_DESTINATION, 4, v_dest_currency, 1);
      
      -- INSERT THE DESTINATION TRANSAC ID AND TRANSFER ID INTO TRANSAC_TRANSFER
      INSERT INTO APPUSER.TRANSAC_TRANSFER (TRANSAC, TRANSFER)
      VALUES (APPUSER.SQ_TRANSAC.CURRVAL, APPUSER.SQ_TRANSFER.CURRVAL);
      -- ====================== END OF BLOCK ======================
      
    END EXECUTE_TRANSFERS;
    /
    -- END OF PROCEDURE

    -- Income Summary Function
    CREATE OR REPLACE FUNCTION APPUSER.incomes_summary (v_bankaccount IN NUMBER, v_person IN NUMBER)
    RETURN NUMBER
    IS
      summary NUMBER;
      v_account_number VARCHAR2(100);
    BEGIN
      
      SELECT DISTINCT ACCOUNT_NUMBER INTO v_account_number
      FROM APPUSER.BANKACCOUNT b
      WHERE b.BANKACCOUNT = v_bankaccount
      AND b.PERSON = v_person;
      
      SELECT DISTINCT SUM(t.AMOUNT) INTO summary
      FROM APPUSER.TRANSAC t, APPUSER.BANKACCOUNT b, APPUSER.PERSON p 
      WHERE t.BANKACCOUNT = v_bankaccount
      AND t.TRTYPE = 1
      AND b.ACCOUNT_NUMBER = v_account_number
      AND p.PERSON = v_person;

      RETURN (summary);
    END;
    /

    -- Expenses summary function
    CREATE OR REPLACE FUNCTION APPUSER.expenses_summary (v_bankaccount IN NUMBER, v_person IN NUMBER)
    RETURN NUMBER
    IS
      summary NUMBER;
      v_account_number VARCHAR2(100);
    BEGIN
      
      SELECT DISTINCT ACCOUNT_NUMBER INTO v_account_number
      FROM APPUSER.BANKACCOUNT b
      WHERE b.BANKACCOUNT = v_bankaccount
      AND b.PERSON = v_person;
      
      SELECT DISTINCT SUM(t.AMOUNT) INTO summary
      FROM APPUSER.TRANSAC t, APPUSER.BANKACCOUNT b, APPUSER.PERSON p 
      WHERE t.BANKACCOUNT = v_bankaccount
      AND t.TRTYPE = 2
      AND b.ACCOUNT_NUMBER = v_account_number
      AND p.PERSON = v_person;

      RETURN (summary);
    END;
    /

    -- Execute Income Procedure
    CREATE OR REPLACE PROCEDURE APPUSER.EXECUTE_INCOME(
      v_person_id IN APPUSER.PERSON.PERSON%TYPE,
      v_transac_id  IN APPUSER.TRANSAC.TRANSAC%TYPE,
      v_amount IN APPUSER.TRANSAC.AMOUNT%TYPE,
      v_description IN APPUSER.TRANSAC.DESCRIPTION%TYPE,
      v_orig_account IN APPUSER.TRANSAC.BANKACCOUNT%TYPE,
      v_category_id IN APPUSER.TRANSAC.CATEGORY%TYPE)
      
    IS
      v_currency_id NUMBER;
    BEGIN
      -- GET THE CURRENCY ID
      SELECT CURRENCY INTO v_currency_id
      FROM APPUSER.BANKACCOUNT
      WHERE BANKACCOUNT = v_orig_account
      AND PERSON = v_person_id;
      
      -- Create The Transaction
      INSERT INTO APPUSER.TRANSAC (
      TRANSAC,
      AMOUNT,
      DESCRIPTION,
      BANKACCOUNT,
      CATEGORY,
      CURRENCY,
      TRTYPE)
      VALUES (
      v_transac_id,
      v_amount,
      v_description,
      v_orig_account,
      v_category_id,
      v_currency_id,
      1);

      --UPDATE THE ACCOUNT
      UPDATE APPUSER.BANKACCOUNT SET BALANCE = (BALANCE + v_amount)
      WHERE BANKACCOUNT  = v_orig_account
      AND PERSON = v_person_id;
    END;
    /

    -- Execute Expense Procedure

    CREATE OR REPLACE PROCEDURE APPUSER.EXECUTE_EXPENSE(
      v_person_id IN APPUSER.PERSON.PERSON%TYPE,
      v_transac_id  IN APPUSER.TRANSAC.TRANSAC%TYPE,
      v_amount IN APPUSER.TRANSAC.AMOUNT%TYPE,
      v_description IN APPUSER.TRANSAC.DESCRIPTION%TYPE,
      v_orig_account IN APPUSER.TRANSAC.BANKACCOUNT%TYPE,
      v_category_id IN APPUSER.TRANSAC.CATEGORY%TYPE)
      
    IS
      v_currency_id NUMBER;
    BEGIN 
      -- GET THE CURRENCY ID
      SELECT CURRENCY INTO v_currency_id
      FROM APPUSER.BANKACCOUNT
      WHERE BANKACCOUNT = v_orig_account
      AND PERSON = v_person_id;
      
      -- Create The Transaction
      INSERT INTO APPUSER.TRANSAC (
      TRANSAC,
      AMOUNT,
      DESCRIPTION,
      BANKACCOUNT,
      CATEGORY,
      CURRENCY,
      TRTYPE)
      VALUES (
      v_transac_id,
      v_amount,
      v_description,
      v_orig_account,
      v_category_id,
      v_currency_id,
      2);
      --UPDATE THE ACCOUNT
      UPDATE APPUSER.BANKACCOUNT SET BALANCE = (BALANCE - v_amount)
      WHERE BANKACCOUNT  = v_orig_account
      AND PERSON = v_person_id;
    END;
    /